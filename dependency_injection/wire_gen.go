// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package dependency_injection

import (
	"github.com/google/wire"
	"github.com/zein-adi/go-keep-new-backend/domains/auth/core/auth_repo_interfaces"
	"github.com/zein-adi/go-keep-new-backend/domains/auth/core/auth_services"
	"github.com/zein-adi/go-keep-new-backend/domains/auth/repos/auth_repos_memory"
	"github.com/zein-adi/go-keep-new-backend/domains/auth/repos/auth_repos_mysql"
	"github.com/zein-adi/go-keep-new-backend/domains/auth/repos/auth_repos_redis"
	"github.com/zein-adi/go-keep-new-backend/domains/keep/core/keep_repo_interfaces"
	"github.com/zein-adi/go-keep-new-backend/domains/keep/core/keep_services"
	"github.com/zein-adi/go-keep-new-backend/domains/keep/repos/keep_repos_memory"
	"github.com/zein-adi/go-keep-new-backend/domains/keep/repos/keep_repos_mysql"
)

// Injectors from auth.go:

// User
func InitUserUserMysqlRepository() *auth_repos_mysql.UserMysqlRepository {
	userMysqlRepository := auth_repos_mysql.NewUserMysqlRepository()
	return userMysqlRepository
}

func InitUserUserServices() *auth_services.UserServices {
	userMysqlRepository := auth_repos_mysql.NewUserMysqlRepository()
	roleMysqlRepository := auth_repos_mysql.NewRoleMysqlRepository()
	userServices := auth_services.NewUserServices(userMysqlRepository, roleMysqlRepository)
	return userServices
}

// Role
func InitUserRoleServices() *auth_services.RoleServices {
	roleMysqlRepository := auth_repos_mysql.NewRoleMysqlRepository()
	roleServices := auth_services.NewRoleServices(roleMysqlRepository)
	return roleServices
}

func InitUserRoleMysqlRepository() *auth_repos_mysql.RoleMysqlRepository {
	roleMysqlRepository := auth_repos_mysql.NewRoleMysqlRepository()
	return roleMysqlRepository
}

// Permission
func InitUserPermissionMemoryRepository() *auth_repos_memory.PermissionMemoryRepository {
	permissionMemoryRepository := auth_repos_memory.NewPermissionMemoryRepository()
	return permissionMemoryRepository
}

func InitUserPermissionServices() *auth_services.PermissionServices {
	permissionMemoryRepository := auth_repos_memory.NewPermissionMemoryRepository()
	roleMysqlRepository := auth_repos_mysql.NewRoleMysqlRepository()
	permissionServices := auth_services.NewPermissionServices(permissionMemoryRepository, roleMysqlRepository)
	return permissionServices
}

// Auth
func InitUserAuthServices() *auth_services.AuthServices {
	authMysqlRepository := auth_repos_redis.NewAuthRedisRepository()
	userMysqlRepository := auth_repos_mysql.NewUserMysqlRepository()
	roleMysqlRepository := auth_repos_mysql.NewRoleMysqlRepository()
	authServices := auth_services.NewAuthServices(authMysqlRepository, userMysqlRepository, roleMysqlRepository)
	return authServices
}

// Injectors from keep.go:

func InitKeepPosServices() *keep_services.PosServices {
	posMysqlRepository := keep_repos_mysql.NewPosMySqlRepository()
	transaksiMemoryRepository := keep_repos_memory.NewTransaksiMemoryRepository()
	posServices := keep_services.NewPosServices(posMysqlRepository, transaksiMemoryRepository)
	return posServices
}

func InitKeepKantongServices() *keep_services.KantongServices {
	kantongMysqlRepository := keep_repos_mysql.NewKantongMysqlRepository()
	kantongServices := keep_services.NewKantongServices(kantongMysqlRepository)
	return kantongServices
}

func InitKeepKantongHistoryServices() *keep_services.KantongHistoryServices {
	kantongHistoryMysqlRepository := keep_repos_mysql.NewKantongHistoryMysqlRepository()
	kantongMysqlRepository := keep_repos_mysql.NewKantongMysqlRepository()
	kantongHistoryServices := keep_services.NewKantongHistoryServices(kantongHistoryMysqlRepository, kantongMysqlRepository)
	return kantongHistoryServices
}

func InitKeepTransaksiServices() *keep_services.TransaksiServices {
	transaksiMemoryRepository := keep_repos_memory.NewTransaksiMemoryRepository()
	posMysqlRepository := keep_repos_mysql.NewPosMySqlRepository()
	kantongMysqlRepository := keep_repos_mysql.NewKantongMysqlRepository()
	transaksiServices := keep_services.NewTransaksiServices(transaksiMemoryRepository, posMysqlRepository, kantongMysqlRepository)
	return transaksiServices
}

func InitKeepLokasiServices() *keep_services.LokasiServices {
	lokasiMemoryRepository := keep_repos_memory.NewLokasiMemoryRepository()
	transaksiMemoryRepository := keep_repos_memory.NewTransaksiMemoryRepository()
	lokasiServices := keep_services.NewLokasiServices(lokasiMemoryRepository, transaksiMemoryRepository)
	return lokasiServices
}

func InitKeepBarangServices() *keep_services.BarangServices {
	barangMemoryRepository := keep_repos_memory.NewBarangMemoryRepository()
	transaksiMemoryRepository := keep_repos_memory.NewTransaksiMemoryRepository()
	barangServices := keep_services.NewBarangServices(barangMemoryRepository, transaksiMemoryRepository)
	return barangServices
}

// auth.go:

var (
	UserRoleSet       = wire.NewSet(auth_services.NewRoleServices, wire.Bind(new(auth_repo_interfaces.IRoleRepository), new(*auth_repos_mysql.RoleMysqlRepository)), auth_repos_mysql.NewRoleMysqlRepository)
	UserPermissionSet = wire.NewSet(auth_services.NewPermissionServices, wire.Bind(new(auth_repo_interfaces.IPermissionRepository), new(*auth_repos_memory.PermissionMemoryRepository)), auth_repos_memory.NewPermissionMemoryRepository)
	UserAuthSet       = wire.NewSet(auth_services.NewAuthServices, wire.Bind(new(auth_repo_interfaces.IAuthRepository), new(*auth_repos_redis.AuthMysqlRepository)), auth_repos_redis.NewAuthRedisRepository)
	UserUserSet       = wire.NewSet(auth_services.NewUserServices, wire.Bind(new(auth_repo_interfaces.IUserRepository), new(*auth_repos_mysql.UserMysqlRepository)), auth_repos_mysql.NewUserMysqlRepository)
)

// keep.go:

var (
	KeepPosSet            = wire.NewSet(keep_services.NewPosServices, wire.Bind(new(keep_repo_interfaces.IPosRepository), new(*keep_repos_mysql.PosMysqlRepository)), keep_repos_mysql.NewPosMySqlRepository)
	KeepKantongSet        = wire.NewSet(keep_services.NewKantongServices, wire.Bind(new(keep_repo_interfaces.IKantongRepository), new(*keep_repos_mysql.KantongMysqlRepository)), keep_repos_mysql.NewKantongMysqlRepository)
	KeepKantongHistorySet = wire.NewSet(keep_services.NewKantongHistoryServices, wire.Bind(new(keep_repo_interfaces.IKantongHistoryRepository), new(*keep_repos_mysql.KantongHistoryMysqlRepository)), keep_repos_mysql.NewKantongHistoryMysqlRepository)
	KeepTransaksiSet      = wire.NewSet(keep_services.NewTransaksiServices, wire.Bind(new(keep_repo_interfaces.ITransaksiRepository), new(*keep_repos_memory.TransaksiMemoryRepository)), keep_repos_memory.NewTransaksiMemoryRepository)
	KeepLokasiSet         = wire.NewSet(keep_services.NewLokasiServices, wire.Bind(new(keep_repo_interfaces.ILokasiRepository), new(*keep_repos_memory.LokasiMemoryRepository)), keep_repos_memory.NewLokasiMemoryRepository)
	KeepBarangSet         = wire.NewSet(keep_services.NewBarangServices, wire.Bind(new(keep_repo_interfaces.IBarangRepository), new(*keep_repos_memory.BarangMemoryRepository)), keep_repos_memory.NewBarangMemoryRepository)
)
